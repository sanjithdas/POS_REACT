import { createSlice, createEntityAdapter, createAsyncThunk } from '@reduxjs/toolkit';
import axios from '../../api/axios';

// Create an entity adapter for the order
const orderAdapter = createEntityAdapter({
  selectId: (order) => order.id,
});

// Create an async thunk for creating an order
export const createOrder = createAsyncThunk(
  'order/createOrder',
  async ({ customerName, customerEmail, products }) => {
    try {
      console.log('Products:', products);

      const productsData = products.map(product => ({
        id: product.id,
        quantity: product.quantity
      }));

      const requestBody = {
        customer_name: customerName,
        customer_email: customerEmail,
        products: productsData
      };

      console.log('Request body:', requestBody);

      const response = await axios.post('/orders', requestBody);

      if (response.data && response.data.id) {
        console.log('Response data:', response.data);
        return response.data;
      } else {
        console.log('Invalid response data:', response.data);
        throw new Error('Invalid response data');
      }
    } catch (error) {
      console.log('Error creating order:', error);
      throw error;
    }
  }
);

// Create the initial state using the adapter's getInitialState method
const initialState = orderAdapter.getInitialState();

// Create the order slice
const orderSlice = createSlice({
  name: 'order',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(createOrder.fulfilled, (state, action) => {
        orderAdapter.addOne(state, action.payload);
      })
      .addCase(createOrder.rejected, (state, action) => {
        console.error('Failed to create order:', action.error.message);
      });
  }
});

// Export the selectors generated by the entity adapter
export const {
  selectAll: selectAllOrders,
  selectById: selectOrderById,
  selectIds: selectOrderIds,
} = orderAdapter.getSelectors((state) => state.order);

// Export the reducer
export default orderSlice.reducer;
